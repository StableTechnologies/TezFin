import smartpy as sp

tstorage = sp.TRecord(borrow_allowed = sp.TBool, mint_allowed = sp.TBool, redeem_allowed = sp.TBool, repay_borrow_allowed = sp.TBool).layout((("borrow_allowed", "mint_allowed"), ("redeem_allowed", "repay_borrow_allowed")))
tparameter = sp.TVariant(acceptGovernance = sp.TAddress, borrowAllowed = sp.TRecord(borrowAmount = sp.TNat, borrower = sp.TAddress, cToken = sp.TAddress).layout(("cToken", ("borrower", "borrowAmount"))), disableMarket = sp.TUnit, enterMarkets = sp.TUnit, exitMarket = sp.TUnit, getHypoAccountLiquidity = sp.TUnit, mintAllowed = sp.TRecord(cToken = sp.TAddress, mintAmount = sp.TNat, minter = sp.TAddress).layout(("cToken", ("minter", "mintAmount"))), redeemAllowed = sp.TRecord(cToken = sp.TAddress, redeemAmount = sp.TNat, redeemer = sp.TAddress).layout(("cToken", ("redeemer", "redeemAmount"))), repayBorrowAllowed = sp.TRecord(borrower = sp.TAddress, cToken = sp.TAddress, payer = sp.TAddress, repayAmount = sp.TNat).layout(("cToken", ("payer", ("borrower", "repayAmount")))), setBorrowAllowed = sp.TBool, setBorrowPaused = sp.TUnit, setCloseFactor = sp.TUnit, setCollateralFactor = sp.TUnit, setLiquidationIncentive = sp.TUnit, setLiquidityPeriodRelevance = sp.TNat, setMarketBorrowCap = sp.TUnit, setMintAllowed = sp.TBool, setMintPaused = sp.TUnit, setPendingGovernance = sp.TAddress, setPriceOracle = sp.TUnit, setPricePeriodRelevance = sp.TNat, setRedeemAllowed = sp.TBool, setRepayBorrowAllowed = sp.TBool, setTransferPaused = sp.TUnit, supportMarket = sp.TUnit, transferAllowed = sp.TRecord(cToken = sp.TAddress, dst = sp.TAddress, src = sp.TAddress, transferTokens = sp.TNat).layout((("cToken", "src"), ("dst", "transferTokens"))), updateAccountLiquidity = sp.TAddress, updateAssetPrice = sp.TAddress).layout((((("acceptGovernance", ("borrowAllowed", "disableMarket")), (("enterMarkets", "exitMarket"), ("getHypoAccountLiquidity", "mintAllowed"))), (("redeemAllowed", ("repayBorrowAllowed", "setBorrowAllowed")), (("setBorrowPaused", "setCloseFactor"), ("setCollateralFactor", "setLiquidationIncentive")))), ((("setLiquidityPeriodRelevance", ("setMarketBorrowCap", "setMintAllowed")), (("setMintPaused", "setPendingGovernance"), ("setPriceOracle", "setPricePeriodRelevance"))), (("setRedeemAllowed", ("setRepayBorrowAllowed", "setTransferPaused")), (("supportMarket", "transferAllowed"), ("updateAccountLiquidity", "updateAssetPrice"))))))
tglobals = { }
tviews = { }
