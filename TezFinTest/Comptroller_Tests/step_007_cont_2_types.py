import smartpy as sp

tstorage = sp.TRecord(account_assets = sp.TBigMap(sp.TAddress, sp.TSet(sp.TAddress)), account_liquidity = sp.TBigMap(sp.TAddress, sp.TRecord(liquidity = sp.TInt, updateLevel = sp.TNat, valid = sp.TBool).layout(("liquidity", ("updateLevel", "valid")))), activeOperations = sp.TSet(sp.TNat), administrator = sp.TAddress, calculation = sp.TRecord(account = sp.TOption(sp.TAddress), borrowAmount = sp.TNat, cTokenModify = sp.TOption(sp.TAddress), redeemTokens = sp.TNat, sumBorrowPlusEffects = sp.TNat, sumCollateral = sp.TNat).layout((("account", ("borrowAmount", "cTokenModify")), ("redeemTokens", ("sumBorrowPlusEffects", "sumCollateral")))), closeFactorMantissa = sp.TNat, expScale = sp.TNat, halfExpScale = sp.TNat, liquidationIncentiveMantissa = sp.TNat, liquidityPeriodRelevance = sp.TNat, marketNameToAddress = sp.TMap(sp.TString, sp.TAddress), markets = sp.TMap(sp.TAddress, sp.TRecord(accountMembership = sp.TBigMap(sp.TAddress, sp.TBool), borrowCap = sp.TNat, borrowPaused = sp.TBool, collateralFactor = sp.TRecord(mantissa = sp.TNat).layout("mantissa"), isListed = sp.TBool, mintPaused = sp.TBool, name = sp.TString, price = sp.TRecord(mantissa = sp.TNat).layout("mantissa"), updateLevel = sp.TNat).layout(((("accountMembership", "borrowCap"), ("borrowPaused", "collateralFactor")), (("isListed", "mintPaused"), ("name", ("price", "updateLevel")))))), oracleAddress = sp.TAddress, pendingAdministrator = sp.TOption(sp.TAddress), pricePeriodRelevance = sp.TNat, transferPaused = sp.TBool).layout((((("account_assets", "account_liquidity"), ("activeOperations", "administrator")), (("calculation", "closeFactorMantissa"), ("expScale", "halfExpScale"))), ((("liquidationIncentiveMantissa", "liquidityPeriodRelevance"), ("marketNameToAddress", "markets")), (("oracleAddress", "pendingAdministrator"), ("pricePeriodRelevance", "transferPaused")))))
tparameter = sp.TVariant(acceptGovernance = sp.TUnit, addMarket = sp.TPair(sp.TAddress, sp.TRecord(accountMembership = sp.TBigMap(sp.TAddress, sp.TBool), borrowCap = sp.TNat, borrowPaused = sp.TBool, collateralFactor = sp.TRecord(mantissa = sp.TNat).layout("mantissa"), isListed = sp.TBool, mintPaused = sp.TBool, name = sp.TString, price = sp.TRecord(mantissa = sp.TNat).layout("mantissa"), updateLevel = sp.TNat).layout(((("accountMembership", "borrowCap"), ("borrowPaused", "collateralFactor")), (("isListed", "mintPaused"), ("name", ("price", "updateLevel")))))), borrowAllowed = sp.TRecord(borrowAmount = sp.TNat, borrower = sp.TAddress, cToken = sp.TAddress).layout(("cToken", ("borrower", "borrowAmount"))), calculateAccountAssetLiquidity = sp.TRecord(account = sp.TAddress, borrowBalance = sp.TNat, cTokenBalance = sp.TNat, exchangeRateMantissa = sp.TNat).layout((("account", "borrowBalance"), ("cTokenBalance", "exchangeRateMantissa"))), disableMarket = sp.TAddress, enterMarkets = sp.TList(sp.TAddress), exitMarket = sp.TAddress, getHypoAccountLiquidity = sp.TRecord(callback = sp.TContract(sp.TInt), data = sp.TRecord(account = sp.TAddress, borrowAmount = sp.TNat, cTokenModify = sp.TAddress, redeemTokens = sp.TNat).layout(("account", ("cTokenModify", ("redeemTokens", "borrowAmount"))))).layout(("callback", "data")), hardResetOp = sp.TUnit, mintAllowed = sp.TRecord(cToken = sp.TAddress, mintAmount = sp.TNat, minter = sp.TAddress).layout(("cToken", ("minter", "mintAmount"))), redeemAllowed = sp.TRecord(cToken = sp.TAddress, redeemAmount = sp.TNat, redeemer = sp.TAddress).layout(("cToken", ("redeemer", "redeemAmount"))), repayBorrowAllowed = sp.TRecord(borrower = sp.TAddress, cToken = sp.TAddress, payer = sp.TAddress, repayAmount = sp.TNat).layout(("cToken", ("payer", ("borrower", "repayAmount")))), returnHypoAccountLiquidity = sp.TPair(sp.TUnit, sp.TContract(sp.TInt)), setAccountLiquidity = sp.TUnit, setAccountSnapAndExitMarket = sp.TRecord(account = sp.TAddress, borrowBalance = sp.TNat, cTokenBalance = sp.TNat, exchangeRateMantissa = sp.TNat).layout((("account", "borrowBalance"), ("cTokenBalance", "exchangeRateMantissa"))), setAssetPrice = sp.TPair(sp.TString, sp.TPair(sp.TTimestamp, sp.TNat)), setBorrowPaused = sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state")), setCloseFactor = sp.TNat, setCollateralFactor = sp.TRecord(cToken = sp.TAddress, newCollateralFactor = sp.TNat).layout(("cToken", "newCollateralFactor")), setLiquidationIncentive = sp.TNat, setLiquidityPeriodRelevance = sp.TNat, setMarketBorrowCap = sp.TRecord(cToken = sp.TAddress, newBorrowCap = sp.TNat).layout(("cToken", "newBorrowCap")), setMintPaused = sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state")), setPendingGovernance = sp.TAddress, setPriceOracle = sp.TAddress, setPricePeriodRelevance = sp.TNat, setTransferPaused = sp.TBool, supportMarket = sp.TRecord(cToken = sp.TAddress, name = sp.TString).layout(("cToken", "name")), sweepFA12 = sp.TRecord(amount = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", "tokenAddress")), sweepFA2 = sp.TRecord(amount = sp.TNat, id = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", ("id", "tokenAddress"))), sweepMutez = sp.TBool, transferAllowed = sp.TRecord(cToken = sp.TAddress, dst = sp.TAddress, src = sp.TAddress, transferTokens = sp.TNat).layout((("cToken", "src"), ("dst", "transferTokens"))), updateAccountLiquidity = sp.TAddress, updateAssetPrice = sp.TAddress).layout(((((("acceptGovernance", "addMarket"), ("borrowAllowed", "calculateAccountAssetLiquidity")), (("disableMarket", "enterMarkets"), ("exitMarket", "getHypoAccountLiquidity"))), ((("hardResetOp", "mintAllowed"), ("redeemAllowed", "repayBorrowAllowed")), (("returnHypoAccountLiquidity", "setAccountLiquidity"), ("setAccountSnapAndExitMarket", ("setAssetPrice", "setBorrowPaused"))))), (((("setCloseFactor", "setCollateralFactor"), ("setLiquidationIncentive", "setLiquidityPeriodRelevance")), (("setMarketBorrowCap", "setMintPaused"), ("setPendingGovernance", "setPriceOracle"))), ((("setPricePeriodRelevance", "setTransferPaused"), ("supportMarket", "sweepFA12")), (("sweepFA2", "sweepMutez"), ("transferAllowed", ("updateAccountLiquidity", "updateAssetPrice")))))))
tglobals = { }
tviews = { }
