import smartpy as sp

tstorage = sp.TRecord(accrualBlockNumber = sp.TNat, accrualIntPeriodRelevance = sp.TNat, activeOperations = sp.TSet(sp.TNat), administrator = sp.TAddress, balances = sp.TBigMap(sp.TAddress, sp.TRecord(accountBorrows = sp.TRecord(interestIndex = sp.TNat, principal = sp.TNat).layout(("interestIndex", "principal")), approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat).layout(("accountBorrows", ("approvals", "balance")))), borrowIndex = sp.TNat, borrowRateMaxMantissa = sp.TNat, borrowRatePerBlock = sp.TNat, comptroller = sp.TAddress, expScale = sp.TNat, halfExpScale = sp.TNat, initialExchangeRateMantissa = sp.TNat, interestRateModel = sp.TAddress, isAccrualInterestValid = sp.TBool, pendingAdministrator = sp.TOption(sp.TAddress), reserveFactorMantissa = sp.TNat, reserveFactorMaxMantissa = sp.TNat, supplyRatePerBlock = sp.TNat, totalBorrows = sp.TNat, totalReserves = sp.TNat, totalSupply = sp.TNat).layout((((("accrualBlockNumber", "accrualIntPeriodRelevance"), ("activeOperations", ("administrator", "balances"))), (("borrowIndex", "borrowRateMaxMantissa"), ("borrowRatePerBlock", ("comptroller", "expScale")))), ((("halfExpScale", "initialExchangeRateMantissa"), ("interestRateModel", ("isAccrualInterestValid", "pendingAdministrator"))), (("reserveFactorMantissa", ("reserveFactorMaxMantissa", "supplyRatePerBlock")), ("totalBorrows", ("totalReserves", "totalSupply"))))))
tparameter = sp.TVariant(acceptGovernance = sp.TUnit, accrueInterest = sp.TUnit, addReserves = sp.TNat, addReservesInternal = sp.TRecord(addAmount = sp.TNat, originalSender = sp.TAddress).layout(("addAmount", "originalSender")), approve = sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), borrow = sp.TNat, borrowBalanceStored = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), doAccrueInterest = sp.TNat, exchangeRateStored = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), getAccountSnapshot = sp.TPair(sp.TAddress, sp.TContract(sp.TRecord(account = sp.TAddress, borrowBalance = sp.TNat, cTokenBalance = sp.TNat, exchangeRateMantissa = sp.TNat).layout((("account", "borrowBalance"), ("cTokenBalance", "exchangeRateMantissa"))))), getAllowance = sp.TPair(sp.TRecord(owner = sp.TAddress, spender = sp.TAddress).layout(("owner", "spender")), sp.TContract(sp.TNat)), getBalance = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), getBalanceOfUnderlying = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), getCash = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), getTotalSupply = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), hardResetOp = sp.TUnit, mint = sp.TNat, redeem = sp.TNat, redeemUnderlying = sp.TNat, reduceReserves = sp.TNat, reduceReservesInternal = sp.TNat, removePendingGovernance = sp.TUnit, repayBorrow = sp.TNat, repayBorrowBehalf = sp.TRecord(borrower = sp.TAddress, repayAmount = sp.TNat).layout(("borrower", "repayAmount")), setAccrualIntPeriodRelevance = sp.TNat, setBorrowRatePerBlock = sp.TNat, setComptroller = sp.TAddress, setInterestRateModel = sp.TAddress, setInterestRateModelInternal = sp.TAddress, setPendingGovernance = sp.TAddress, setReserveFactor = sp.TNat, setReserveFactorInternal = sp.TNat, setSupplyRatePerBlock = sp.TNat, sweepFA12 = sp.TRecord(amount = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", "tokenAddress")), sweepFA2 = sp.TRecord(amount = sp.TNat, id = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", ("id", "tokenAddress"))), sweepMutez = sp.TBool, transfer = sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), updateBorrowRateInternal = sp.TUnit, updateBorrowRatePerBlock = sp.TUnit, updateSupplyRateInternal = sp.TUnit, updateSupplyRatePerBlock = sp.TUnit).layout(((((("acceptGovernance", "accrueInterest"), ("addReserves", ("addReservesInternal", "approve"))), (("borrow", "borrowBalanceStored"), ("doAccrueInterest", ("exchangeRateStored", "getAccountSnapshot")))), ((("getAllowance", "getBalance"), ("getBalanceOfUnderlying", ("getCash", "getTotalSupply"))), (("hardResetOp", "mint"), ("redeem", ("redeemUnderlying", "reduceReserves"))))), (((("reduceReservesInternal", "removePendingGovernance"), ("repayBorrow", ("repayBorrowBehalf", "setAccrualIntPeriodRelevance"))), (("setBorrowRatePerBlock", "setComptroller"), ("setInterestRateModel", ("setInterestRateModelInternal", "setPendingGovernance")))), ((("setReserveFactor", "setReserveFactorInternal"), ("setSupplyRatePerBlock", ("sweepFA12", "sweepFA2"))), (("sweepMutez", ("transfer", "updateBorrowRateInternal")), ("updateBorrowRatePerBlock", ("updateSupplyRateInternal", "updateSupplyRatePerBlock")))))))
tglobals = { }
tviews = { }
