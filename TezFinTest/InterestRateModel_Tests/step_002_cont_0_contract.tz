parameter (or (pair %getBorrowRate (pair (nat %borrows) (nat %cash)) (pair (contract %cb nat) (nat %reserves))) (pair %getSupplyRate (pair (nat %borrows) (nat %cash)) (pair (contract %cb nat) (pair (nat %reserveFactorMantissa) (nat %reserves)))));
storage   (pair (nat %baseRatePerBlock) (pair (nat %multiplierPerBlock) (nat %scale)));
code
  {
    CAST (pair (or (pair (pair nat nat) (pair (contract nat) nat)) (pair (pair nat nat) (pair (contract nat) (pair nat nat)))) (pair nat (pair nat nat))); # pair (or (pair (pair nat nat) (pair (contract nat) nat)) (pair (pair nat nat) (pair (contract nat) (pair nat nat)))) (pair nat (pair nat nat))
    UNPAIR;     # or (pair (pair nat nat) (pair (contract nat) nat)) (pair (pair nat nat) (pair (contract nat) (pair nat nat))) : pair nat (pair nat nat)
    IF_LEFT
      {
        # == getBorrowRate ==
        # ur = sp.local("ur", 0) # pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        PUSH nat 0; # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        # if params.borrows > 0: # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        PUSH nat 0; # nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        DUP 3;      # pair (pair nat nat) (pair (contract nat) nat) : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        CAR;        # pair nat nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        CAR;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        COMPARE;    # int : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        GT;         # bool : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        IF
          {
            DROP;       # pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            # compute_InterestRateModel_55 = sp.local("compute_InterestRateModel_55", sp.as_nat((params.cash + params.borrows) - params.reserves)) # pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) nat) : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            GET 4;      # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            SWAP;       # pair (pair nat nat) (pair (contract nat) nat) : nat : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) nat) : pair (pair nat nat) (pair (contract nat) nat) : nat : pair nat (pair nat nat)
            CAR;        # pair nat nat : pair (pair nat nat) (pair (contract nat) nat) : nat : pair nat (pair nat nat)
            CAR;        # nat : pair (pair nat nat) (pair (contract nat) nat) : nat : pair nat (pair nat nat)
            SWAP;       # pair (pair nat nat) (pair (contract nat) nat) : nat : nat : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) nat) : pair (pair nat nat) (pair (contract nat) nat) : nat : nat : pair nat (pair nat nat)
            DUG 3;      # pair (pair nat nat) (pair (contract nat) nat) : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            CAR;        # pair nat nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            CDR;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            ADD;        # nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            SUB;        # int : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            ISNAT;      # option nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            IF_NONE
              {
                PUSH int 55; # int : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }
              {}; # @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            # sp.verify(compute_InterestRateModel_55.value > 0, 'IRM_INSUFFICIENT_CASH') # @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            DUP;        # @some : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            PUSH nat 0; # nat : @some : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            COMPARE;    # int : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            LT;         # bool : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            IF
              {}
              {
                PUSH string "IRM_INSUFFICIENT_CASH"; # string : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }; # @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            # ur.value = (params.borrows * self.data.scale) // compute_InterestRateModel_55.value # @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            DUP 3;      # pair nat (pair nat nat) : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            GET 4;      # nat : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            DUP 3;      # pair (pair nat nat) (pair (contract nat) nat) : nat : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            CAR;        # pair nat nat : nat : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            CAR;        # nat : nat : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            MUL;        # nat : @some : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            EDIV;       # option (pair nat nat) : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            IF_NONE
              {
                PUSH int 57; # int : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
              }; # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
          }
          {}; # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        # compute_InterestRateModel_62 = sp.local("compute_InterestRateModel_62", ((ur.value * self.data.multiplierPerBlock) // self.data.scale) + self.data.baseRatePerBlock) # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        DIG 2;      # pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) nat)
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) nat)
        CAR;        # nat : pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) nat)
        SWAP;       # pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) nat)
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) nat)
        GET 4;      # nat : pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) nat)
        SWAP;       # pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat)
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat)
        DUG 5;      # pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        GET 3;      # nat : nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        DIG 3;      # nat : nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        MUL;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        EDIV;       # option (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        IF_NONE
          {
            PUSH int 62; # int : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
          }; # nat : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        ADD;        # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        # sp.transfer(compute_InterestRateModel_62.value, sp.tez(0), params.cb) # nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        NIL operation; # list operation : nat : pair (pair nat nat) (pair (contract nat) nat) : pair nat (pair nat nat)
        DIG 2;      # pair (pair nat nat) (pair (contract nat) nat) : list operation : nat : pair nat (pair nat nat)
        GET 3;      # contract nat : list operation : nat : pair nat (pair nat nat)
        PUSH mutez 0; # mutez : contract nat : list operation : nat : pair nat (pair nat nat)
        DIG 3;      # nat : mutez : contract nat : list operation : pair nat (pair nat nat)
        TRANSFER_TOKENS; # operation : list operation : pair nat (pair nat nat)
        CONS;       # list operation : pair nat (pair nat nat)
      }
      {
        # == getSupplyRate ==
        # ur = sp.local("ur", 0) # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        PUSH nat 0; # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        # if params.borrows > 0: # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        PUSH nat 0; # nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DUP 3;      # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        CAR;        # pair nat nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        CAR;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        COMPARE;    # int : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        GT;         # bool : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        IF
          {
            DROP;       # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            # compute_InterestRateModel_55 = sp.local("compute_InterestRateModel_55", sp.as_nat((params.cash + params.borrows) - params.reserves)) # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            GET 6;      # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            SWAP;       # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : pair nat (pair nat nat)
            CAR;        # pair nat nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : pair nat (pair nat nat)
            CAR;        # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : pair nat (pair nat nat)
            SWAP;       # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : nat : pair nat (pair nat nat)
            DUP;        # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : nat : pair nat (pair nat nat)
            DUG 3;      # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            CAR;        # pair nat nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            CDR;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            ADD;        # nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            SUB;        # int : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            ISNAT;      # option nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            IF_NONE
              {
                PUSH int 55; # int : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }
              {}; # @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            # sp.verify(compute_InterestRateModel_55.value > 0, 'IRM_INSUFFICIENT_CASH') # @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            DUP;        # @some : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            PUSH nat 0; # nat : @some : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            COMPARE;    # int : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            LT;         # bool : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            IF
              {}
              {
                PUSH string "IRM_INSUFFICIENT_CASH"; # string : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }; # @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            # ur.value = (params.borrows * self.data.scale) // compute_InterestRateModel_55.value # @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            DUP 3;      # pair nat (pair nat nat) : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            GET 4;      # nat : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            DUP 3;      # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            CAR;        # pair nat nat : nat : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            CAR;        # nat : nat : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            MUL;        # nat : @some : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            EDIV;       # option (pair nat nat) : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            IF_NONE
              {
                PUSH int 57; # int : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
                FAILWITH;   # FAILED
              }
              {
                CAR;        # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
              }; # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
          }
          {}; # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        # compute_InterestRateModel_62 = sp.local("compute_InterestRateModel_62", ((ur.value * self.data.multiplierPerBlock) // self.data.scale) + self.data.baseRatePerBlock) # nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DIG 2;      # pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        CAR;        # nat : pair nat (pair nat nat) : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        SWAP;       # pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        GET 4;      # nat : pair nat (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        SWAP;       # pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUG 5;      # pair nat (pair nat nat) : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        GET 3;      # nat : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DUP 4;      # nat : nat : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        MUL;        # nat : nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        EDIV;       # option (pair nat nat) : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        IF_NONE
          {
            PUSH int 62; # int : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
          }; # nat : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        ADD;        # nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        # sp.transfer((ur.value * ((compute_InterestRateModel_62.value * sp.as_nat(self.data.scale - params.reserveFactorMantissa)) // self.data.scale)) // self.data.scale, sp.tez(0), params.cb) # nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        NIL operation; # list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DUP 4;      # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        GET 3;      # contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        PUSH mutez 0; # mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DIG 6;      # pair nat (pair nat nat) : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        GET 4;      # nat : pair nat (pair nat nat) : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        SWAP;       # pair nat (pair nat nat) : nat : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUP;        # pair nat (pair nat nat) : pair nat (pair nat nat) : nat : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat))
        DUG 8;      # pair nat (pair nat nat) : nat : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        GET 4;      # nat : nat : mutez : contract nat : list operation : nat : nat : pair (pair nat nat) (pair (contract nat) (pair nat nat)) : pair nat (pair nat nat)
        DIG 7;      # pair (pair nat nat) (pair (contract nat) (pair nat nat)) : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        GET 5;      # nat : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        DUP 9;      # pair nat (pair nat nat) : nat : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        GET 4;      # nat : nat : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        SUB;        # int : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        ISNAT;      # option nat : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        IF_NONE
          {
            PUSH int 44; # int : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : mutez : contract nat : list operation : nat : nat : pair nat (pair nat nat)
        DIG 6;      # nat : @some : nat : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
        MUL;        # nat : nat : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
        EDIV;       # option (pair nat nat) : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
        IF_NONE
          {
            PUSH int 47; # int : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
          }; # nat : nat : mutez : contract nat : list operation : nat : pair nat (pair nat nat)
        DIG 5;      # nat : nat : nat : mutez : contract nat : list operation : pair nat (pair nat nat)
        MUL;        # nat : nat : mutez : contract nat : list operation : pair nat (pair nat nat)
        EDIV;       # option (pair nat nat) : mutez : contract nat : list operation : pair nat (pair nat nat)
        IF_NONE
          {
            PUSH int 48; # int : mutez : contract nat : list operation : pair nat (pair nat nat)
            FAILWITH;   # FAILED
          }
          {
            CAR;        # nat : mutez : contract nat : list operation : pair nat (pair nat nat)
          }; # nat : mutez : contract nat : list operation : pair nat (pair nat nat)
        TRANSFER_TOKENS; # operation : list operation : pair nat (pair nat nat)
        CONS;       # list operation : pair nat (pair nat nat)
      }; # list operation : pair nat (pair nat nat)
    PAIR;       # pair (list operation) (pair nat (pair nat nat))
  };