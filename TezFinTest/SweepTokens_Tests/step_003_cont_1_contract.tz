parameter (or (or (pair %sweepFA12 (nat %amount) (address %tokenAddress)) (pair %sweepFA2 (nat %amount) (pair (nat %id) (address %tokenAddress)))) (or (bool %sweepMutez) (nat %verifyMutezBalance)));
storage   address;
code
  {
    CAST (pair (or (or (pair nat address) (pair nat (pair nat address))) (or bool nat)) address); # pair (or (or (pair nat address) (pair nat (pair nat address))) (or bool nat)) address
    UNPAIR;     # or (or (pair nat address) (pair nat (pair nat address))) (or bool nat) : address
    IF_LEFT
      {
        IF_LEFT
          {
            # == sweepFA12 ==
            # sp.transfer(sp.record(from_ = sp.self_address, to_ = self.data.administrator, value = params.amount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), params.tokenAddress, entry_point='transfer').open_some()) # pair nat address : address
            DUP;        # pair nat address : pair nat address : address
            CDR;        # address : pair nat address : address
            CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : pair nat address : address
            IF_NONE
              {
                PUSH int 11; # int : pair nat address : address
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat address : address
            NIL operation; # list operation : @some : pair nat address : address
            SWAP;       # @some : list operation : pair nat address : address
            PUSH mutez 0; # mutez : @some : list operation : pair nat address : address
            DIG 3;      # pair nat address : mutez : @some : list operation : address
            CAR;        # nat : mutez : @some : list operation : address
            DUP 5;      # address : nat : mutez : @some : list operation : address
            SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : address
            PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : address
            TRANSFER_TOKENS; # operation : list operation : address
            CONS;       # list operation : address
          }
          {
            # == sweepFA2 ==
            # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = self.data.administrator, token_id = params.id, amount = params.amount)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.tokenAddress, entry_point='transfer').open_some()) # pair nat (pair nat address) : address
            DUP;        # pair nat (pair nat address) : pair nat (pair nat address) : address
            GET 4;      # address : pair nat (pair nat address) : address
            CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))); # option (contract (list (pair address (list (pair address (pair nat nat)))))) : pair nat (pair nat address) : address
            IF_NONE
              {
                PUSH int 36; # int : pair nat (pair nat address) : address
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat (pair nat address) : address
            NIL operation; # list operation : @some : pair nat (pair nat address) : address
            SWAP;       # @some : list operation : pair nat (pair nat address) : address
            PUSH mutez 0; # mutez : @some : list operation : pair nat (pair nat address) : address
            NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair nat (pair nat address) : address
            NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair nat (pair nat address) : address
            DIG 5;      # pair nat (pair nat address) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            DUP;        # pair nat (pair nat address) : pair nat (pair nat address) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            CAR;        # nat : pair nat (pair nat address) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            SWAP;       # pair nat (pair nat address) : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            GET 3;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            DUP 8;      # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : address
            TRANSFER_TOKENS; # operation : list operation : address
            CONS;       # list operation : address
          }; # list operation : address
      }
      {
        IF_LEFT
          {
            # == sweepMutez ==
            # if params: # bool : address
            IF
              {
                # sp.send(self.data.administrator, sp.balance) # address
                DUP;        # address : address
                CONTRACT %receive unit; # option (contract unit) : address
                IF_NONE
                  {
                    PUSH int 18; # int : address
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address
                NIL operation; # list operation : @some : address
                SWAP;       # @some : list operation : address
                BALANCE;    # @balance : @some : list operation : address
                UNIT;       # unit : @balance : @some : list operation : address
                TRANSFER_TOKENS; # operation : list operation : address
                CONS;       # list operation : address
              }
              {
                # sp.send(self.data.administrator, sp.balance) # address
                DUP;        # address : address
                CONTRACT unit; # option (contract unit) : address
                IF_NONE
                  {
                    PUSH int 21; # int : address
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address
                NIL operation; # list operation : @some : address
                SWAP;       # @some : list operation : address
                BALANCE;    # @balance : @some : list operation : address
                UNIT;       # unit : @balance : @some : list operation : address
                TRANSFER_TOKENS; # operation : list operation : address
                CONS;       # list operation : address
              }; # list operation : address
          }
          {
            # == verifyMutezBalance ==
            # sp.verify(sp.fst(sp.ediv(sp.balance, sp.mutez(1)).open_some(message = sp.unit)) == params) # nat : address
            PUSH mutez 1; # mutez : nat : address
            BALANCE;    # @balance : mutez : nat : address
            EDIV;       # option (pair nat mutez) : nat : address
            IF_NONE
              {
                UNIT;       # unit : nat : address
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : address
            CAR;        # nat : nat : address
            COMPARE;    # int : address
            EQ;         # bool : address
            IF
              {}
              {
                PUSH string "WrongCondition: sp.fst(sp.ediv(sp.balance, sp.mutez(1)).open_some(message = sp.unit)) == params"; # string : address
                FAILWITH;   # FAILED
              }; # address
            NIL operation; # list operation : address
          }; # list operation : address
      }; # list operation : address
    PAIR;       # pair (list operation) address
  };