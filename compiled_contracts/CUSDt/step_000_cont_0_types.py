import smartpy as sp

tstorage = sp.TRecord(accrualBlockNumber = sp.TNat, activeOperations = sp.TSet(sp.TNat), administrator = sp.TAddress, borrowIndex = sp.TNat, borrowRateMaxMantissa = sp.TNat, borrowRatePerBlock = sp.TNat, borrows = sp.TBigMap(sp.TAddress, sp.TRecord(interestIndex = sp.TNat, principal = sp.TNat).layout(("interestIndex", "principal"))), comptroller = sp.TAddress, currentCash = sp.TNat, expScale = sp.TNat, fa2_TokenAddress = sp.TAddress, halfExpScale = sp.TNat, initialExchangeRateMantissa = sp.TNat, interestRateModel = sp.TAddress, ledger = sp.TBigMap(sp.TAddress, sp.TRecord(approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat).layout(("approvals", "balance"))), metadata = sp.TBigMap(sp.TString, sp.TBytes), pendingAdministrator = sp.TOption(sp.TAddress), protocolSeizeShareMantissa = sp.TNat, reserveFactorMantissa = sp.TNat, reserveFactorMaxMantissa = sp.TNat, supplyRatePerBlock = sp.TNat, tokenId = sp.TNat, token_metadata = sp.TBigMap(sp.TNat, sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info"))), totalBorrows = sp.TNat, totalReserves = sp.TNat, totalSupply = sp.TNat).layout((((("accrualBlockNumber", ("activeOperations", "administrator")), ("borrowIndex", ("borrowRateMaxMantissa", "borrowRatePerBlock"))), (("borrows", ("comptroller", "currentCash")), (("expScale", "fa2_TokenAddress"), ("halfExpScale", "initialExchangeRateMantissa")))), ((("interestRateModel", ("ledger", "metadata")), ("pendingAdministrator", ("protocolSeizeShareMantissa", "reserveFactorMantissa"))), (("reserveFactorMaxMantissa", ("supplyRatePerBlock", "tokenId")), (("token_metadata", "totalBorrows"), ("totalReserves", "totalSupply"))))))
tparameter = sp.TVariant(acceptGovernance = sp.TUnit, accrueInterest = sp.TUnit, accrueInterestInternal = sp.TContract(sp.TNat), addReserves = sp.TNat, addReservesInternal = sp.TRecord(addAmount = sp.TNat, originalSender = sp.TAddress).layout(("addAmount", "originalSender")), approve = sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), borrow = sp.TNat, borrowBalanceStored = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), doAccrueInterest = sp.TNat, exchangeRateStored = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), getAccountSnapshot = sp.TPair(sp.TAddress, sp.TContract(sp.TRecord(account = sp.TAddress, borrowBalance = sp.TNat, cTokenBalance = sp.TNat, exchangeRateMantissa = sp.TNat).layout((("account", "borrowBalance"), ("cTokenBalance", "exchangeRateMantissa"))))), getAllowance = sp.TPair(sp.TRecord(owner = sp.TAddress, spender = sp.TAddress).layout(("owner", "spender")), sp.TContract(sp.TNat)), getBalance = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), getBalanceOfUnderlying = sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), getCash = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), getTotalSupply = sp.TPair(sp.TUnit, sp.TContract(sp.TNat)), hardResetOp = sp.TUnit, liquidateBorrow = sp.TRecord(borrower = sp.TAddress, cTokenCollateral = sp.TAddress, repayAmount = sp.TNat).layout(("borrower", ("cTokenCollateral", "repayAmount"))), mint = sp.TNat, redeem = sp.TNat, redeemUnderlying = sp.TNat, reduceReserves = sp.TNat, reduceReservesInternal = sp.TNat, removePendingGovernance = sp.TUnit, repayBorrow = sp.TNat, repayBorrowBehalf = sp.TRecord(borrower = sp.TAddress, repayAmount = sp.TNat).layout(("borrower", "repayAmount")), seize = sp.TRecord(borrower = sp.TAddress, liquidator = sp.TAddress, seizeTokens = sp.TNat).layout(("borrower", ("liquidator", "seizeTokens"))), setCash = sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance"))), setComptroller = sp.TAddress, setInterestRateModel = sp.TAddress, setInterestRateModelInternal = sp.TAddress, setPendingGovernance = sp.TAddress, setReserveFactor = sp.TNat, setReserveFactorInternal = sp.TNat, sweepFA12 = sp.TRecord(amount = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", "tokenAddress")), sweepFA2 = sp.TRecord(amount = sp.TNat, id = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", ("id", "tokenAddress"))), sweepMutez = sp.TBool, transfer = sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), updateMetadata = sp.TRecord(key = sp.TString, value = sp.TBytes).layout(("key", "value")), updateProtocolSeizeShare = sp.TNat).layout(((((("acceptGovernance", "accrueInterest"), ("accrueInterestInternal", ("addReserves", "addReservesInternal"))), (("approve", "borrow"), ("borrowBalanceStored", ("doAccrueInterest", "exchangeRateStored")))), ((("getAccountSnapshot", "getAllowance"), ("getBalance", ("getBalanceOfUnderlying", "getCash"))), (("getTotalSupply", "hardResetOp"), ("liquidateBorrow", ("mint", "redeem"))))), (((("redeemUnderlying", "reduceReserves"), ("reduceReservesInternal", ("removePendingGovernance", "repayBorrow"))), (("repayBorrowBehalf", "seize"), ("setCash", ("setComptroller", "setInterestRateModel")))), ((("setInterestRateModelInternal", "setPendingGovernance"), ("setReserveFactor", ("setReserveFactorInternal", "sweepFA12"))), (("sweepFA2", "sweepMutez"), ("transfer", ("updateMetadata", "updateProtocolSeizeShare")))))))
tprivates = { }
tviews = { "accrualBlockNumber": (sp.TUnit, sp.TNat), "balanceOf": (sp.TAddress, sp.TNat), "borrowBalanceStoredView": (sp.TAddress, sp.TNat), "comptroller": (sp.TUnit, sp.TAddress), "exchangeRateStoredView": (sp.TUnit, sp.TNat), "getAccountSnapshotView": (sp.TAddress, sp.TRecord(account = sp.TAddress, borrowBalance = sp.TNat, cTokenBalance = sp.TNat, exchangeRateMantissa = sp.TNat).layout((("account", "borrowBalance"), ("cTokenBalance", "exchangeRateMantissa")))) }
