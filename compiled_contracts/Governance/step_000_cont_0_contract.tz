parameter (or (or (or (unit %acceptGovernance) (unit %receive)) (or (address %setPendingGovernance) (pair %setPriceOracleAndTimeDiff (address %comptroller) (pair (address %priceOracle) (int %timeDiff))))) (or (or (or (or (address %acceptContractGovernance) (pair %disableMarket (address %cToken) (address %comptroller))) (or (pair %reduceReserves (nat %amount) (address %cToken)) (or (pair %setAccrualIntPeriodRelevance (nat %blockNumber) (address %cToken)) (pair %setBorrowPaused (address %comptroller) (pair %tokenState (address %cToken) (bool %state)))))) (or (or (pair %setCloseFactor (nat %closeFactor) (address %comptroller)) (pair %setCollateralFactor (pair %collateralFactor (address %cToken) (nat %newCollateralFactor)) (address %comptroller))) (or (pair %setComptroller (address %cToken) (address %comptroller)) (or (pair %setContractGovernance (address %contractAddress) (address %governance)) (pair %setInterestRateModel (address %cToken) (address %interestRateModel)))))) (or (or (or (pair %setLiquidationIncentive (address %comptroller) (nat %liquidationIncentive)) (pair %setLiquidityPeriodRelevance (nat %blockNumber) (address %comptroller))) (or (pair %setMintPaused (address %comptroller) (pair %tokenState (address %cToken) (bool %state))) (or (pair %setPricePeriodRelevance (nat %blockNumber) (address %comptroller)) (pair %setReserveFactor (address %cToken) (nat %newReserveFactor))))) (or (or (pair %setTransferPaused (address %comptroller) (bool %state)) (pair %supportMarket (address %comptroller) (pair %market (address %cToken) (pair (string %name) (nat %priceExp))))) (or (pair %sweepFA12 (nat %amount) (address %tokenAddress)) (or (pair %sweepFA2 (nat %amount) (pair (nat %id) (address %tokenAddress))) (bool %sweepMutez)))))));
storage   (pair (pair (address %administrator) (option %pendingAdministrator address)) (big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))));
code
  {
    UNPAIR 3;   # @parameter : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
    IF_LEFT
      {
        DUP;        # @parameter.left : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                # == acceptGovernance == # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                PUSH nat 0; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }
              {
                DROP;       # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                # == receive == # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                PUSH nat 1; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
          }
          {
            IF_LEFT
              {
                DROP;       # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                # == setPendingGovernance == # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                PUSH nat 2; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }
              {
                DROP;       # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                # == setPriceOracleAndTimeDiff == # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                PUSH nat 3; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
          }; # nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        DUP 4;      # big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address)))) : nat : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        SWAP;       # nat : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address)))) : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        GET;        # option (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address)))) : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        IF_NONE
          {
            PUSH int -1; # int : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
            FAILWITH;   # FAILED
          }
          {
            # missing entry point # @some : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
          }; # @some : @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        DUG 2;      # @parameter.left : pair (address %administrator) (option %pendingAdministrator address) : @some : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        PAIR;       # pair @parameter.left (pair (address %administrator) (option %pendingAdministrator address)) : @some : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        EXEC;       # pair (list operation) (pair address (option address)) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
        UNPAIR;     # list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%acceptContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == acceptContractGovernance ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%acceptContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%acceptContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.send(params, sp.tez(0)) # @parameter%acceptContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %acceptGovernance unit; # option (contract unit) : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 73; # int : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        UNIT;       # unit : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%disableMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == disableMarket ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%disableMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%disableMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.cToken, sp.tez(0), sp.contract(sp.TAddress, params.comptroller, entry_point='disableMarket').open_some()) # @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%disableMarket : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %disableMarket address; # option (contract address) : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 287; # int : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%disableMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%disableMarket : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%reduceReserves : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == reduceReserves ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%reduceReserves : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%reduceReserves : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.amount, sp.tez(0), sp.contract(sp.TNat, params.cToken, entry_point='reduceReserves').open_some()) # @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%reduceReserves : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %reduceReserves nat; # option (contract nat) : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 186; # int : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%reduceReserves : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%reduceReserves : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setAccrualIntPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setAccrualIntPeriodRelevance ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setAccrualIntPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setAccrualIntPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.blockNumber, sp.tez(0), sp.contract(sp.TNat, params.cToken, entry_point='setAccrualIntPeriodRelevance').open_some()) # @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setAccrualIntPeriodRelevance : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # address : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setAccrualIntPeriodRelevance nat; # option (contract nat) : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 89; # int : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setAccrualIntPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setAccrualIntPeriodRelevance : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setBorrowPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setBorrowPaused ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setBorrowPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setBorrowPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.tokenState, sp.tez(0), sp.contract(sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state")), params.comptroller, entry_point='setBorrowPaused').open_some()) # @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setBorrowPaused : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setBorrowPaused (pair (address %cToken) (bool %state)); # option (contract (pair (address %cToken) (bool %state))) : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 325; # int : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setBorrowPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setBorrowPaused : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # pair (address %cToken) (bool %state) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCloseFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setCloseFactor ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCloseFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCloseFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.closeFactor, sp.tez(0), sp.contract(sp.TNat, params.comptroller, entry_point='setCloseFactor').open_some()) # @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setCloseFactor : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setCloseFactor nat; # option (contract nat) : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 218; # int : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setCloseFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setCloseFactor : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCollateralFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setCollateralFactor ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCollateralFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCollateralFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.collateralFactor, sp.tez(0), sp.contract(sp.TRecord(cToken = sp.TAddress, newCollateralFactor = sp.TNat).layout(("cToken", "newCollateralFactor")), params.comptroller, entry_point='setCollateralFactor').open_some()) # @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setCollateralFactor : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setCollateralFactor (pair (address %cToken) (nat %newCollateralFactor)); # option (contract (pair (address %cToken) (nat %newCollateralFactor))) : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 236; # int : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setCollateralFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setCollateralFactor : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # pair (address %cToken) (nat %newCollateralFactor) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setComptroller : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setComptroller ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setComptroller : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setComptroller : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.comptroller, sp.tez(0), sp.contract(sp.TAddress, params.cToken, entry_point='setComptroller').open_some()) # @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setComptroller : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setComptroller address; # option (contract address) : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 139; # int : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setComptroller : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setComptroller : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setContractGovernance ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setContractGovernance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.governance, sp.tez(0), sp.contract(sp.TAddress, params.contractAddress, entry_point='setPendingGovernance').open_some()) # @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setContractGovernance : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setPendingGovernance address; # option (contract address) : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 60; # int : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setContractGovernance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setContractGovernance : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # address : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setInterestRateModel : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setInterestRateModel ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setInterestRateModel : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setInterestRateModel : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.interestRateModel, sp.tez(0), sp.contract(sp.TAddress, params.cToken, entry_point='setInterestRateModel').open_some()) # @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setInterestRateModel : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setInterestRateModel address; # option (contract address) : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 155; # int : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setInterestRateModel : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setInterestRateModel : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # address : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidationIncentive : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setLiquidationIncentive ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidationIncentive : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidationIncentive : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.liquidationIncentive, sp.tez(0), sp.contract(sp.TNat, params.comptroller, entry_point='setLiquidationIncentive').open_some()) # @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setLiquidationIncentive : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setLiquidationIncentive nat; # option (contract nat) : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 252; # int : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setLiquidationIncentive : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setLiquidationIncentive : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidityPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setLiquidityPeriodRelevance ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidityPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidityPeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.blockNumber, sp.tez(0), sp.contract(sp.TNat, params.comptroller, entry_point='setLiquidityPeriodRelevance').open_some()) # @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setLiquidityPeriodRelevance : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setLiquidityPeriodRelevance nat; # option (contract nat) : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 121; # int : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setLiquidityPeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setLiquidityPeriodRelevance : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setMintPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setMintPaused ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setMintPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setMintPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.tokenState, sp.tez(0), sp.contract(sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state")), params.comptroller, entry_point='setMintPaused').open_some()) # @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setMintPaused : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setMintPaused (pair (address %cToken) (bool %state)); # option (contract (pair (address %cToken) (bool %state))) : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 307; # int : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setMintPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setMintPaused : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # pair (address %cToken) (bool %state) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        IF_LEFT
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setPricePeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setPricePeriodRelevance ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setPricePeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setPricePeriodRelevance : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.blockNumber, sp.tez(0), sp.contract(sp.TNat, params.comptroller, entry_point='setPricePeriodRelevance').open_some()) # @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setPricePeriodRelevance : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # address : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setPricePeriodRelevance nat; # option (contract nat) : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 105; # int : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setPricePeriodRelevance : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setPricePeriodRelevance : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }
                          {
                            SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setReserveFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # == setReserveFactor ==
                            # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setReserveFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setReserveFactor : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SENDER;     # @sender : address : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            COMPARE;    # int : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            EQ;         # bool : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {}
                              {
                                PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }; # @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            # sp.transfer(params.newReserveFactor, sp.tez(0), sp.contract(sp.TNat, params.cToken, entry_point='setReserveFactor').open_some()) # @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%setReserveFactor : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %setReserveFactor nat; # option (contract nat) : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 171; # int : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%setReserveFactor : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 3;      # @parameter%setReserveFactor : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CDR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setTransferPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == setTransferPaused ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setTransferPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%setTransferPaused : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.state, sp.tez(0), sp.contract(sp.TBool, params.comptroller, entry_point='setTransferPaused').open_some()) # @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%setTransferPaused : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %setTransferPaused bool; # option (contract bool) : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 341; # int : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%setTransferPaused : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%setTransferPaused : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # bool : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        SWAP;       # pair (address %administrator) (option %pendingAdministrator address) : @parameter%supportMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # == supportMarket ==
                        # sp.verify(sp.sender == self.data.administrator, 'GOV_NOT_ADMIN') # pair (address %administrator) (option %pendingAdministrator address) : @parameter%supportMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : @parameter%supportMarket : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUG 2;      # pair (address %administrator) (option %pendingAdministrator address) : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SENDER;     # @sender : address : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        COMPARE;    # int : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        EQ;         # bool : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF
                          {}
                          {
                            PUSH string "GOV_NOT_ADMIN"; # string : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }; # @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        # sp.transfer(params.market, sp.tez(0), sp.contract(sp.TRecord(cToken = sp.TAddress, name = sp.TString, priceExp = sp.TNat).layout(("cToken", ("name", "priceExp"))), params.comptroller, entry_point='supportMarket').open_some()) # @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%supportMarket : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %supportMarket (pair (address %cToken) (pair (string %name) (nat %priceExp))); # option (contract (pair (address %cToken) (pair (string %name) (nat %priceExp)))) : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 271; # int : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%supportMarket : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%supportMarket : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # pair (address %cToken) (pair (string %name) (nat %priceExp)) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }
                  {
                    IF_LEFT
                      {
                        # == sweepFA12 ==
                        # sp.transfer(sp.record(from_ = sp.self_address, to_ = self.data.administrator, value = params.amount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), params.tokenAddress, entry_point='transfer').open_some()) # @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP;        # @parameter%sweepFA12 : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CDR;        # address : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        IF_NONE
                          {
                            PUSH int 12; # int : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        NIL operation; # list operation : @some : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SWAP;       # @some : list operation : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%sweepFA12 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DIG 3;      # @parameter%sweepFA12 : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        DUP 5;      # pair (address %administrator) (option %pendingAdministrator address) : nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CAR;        # address : nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                        CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }
                      {
                        IF_LEFT
                          {
                            # == sweepFA2 ==
                            # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = self.data.administrator, token_id = params.id, amount = params.amount)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.tokenAddress, entry_point='transfer').open_some()) # @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%sweepFA2 : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            GET 4;      # address : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF_NONE
                              {
                                PUSH int 38; # int : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL operation; # list operation : @some : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @some : list operation : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%sweepFA2 : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DIG 5;      # @parameter%sweepFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP;        # @parameter%sweepFA2 : @parameter%sweepFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # nat : @parameter%sweepFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SWAP;       # @parameter%sweepFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            GET 3;      # nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            DUP 8;      # pair (address %administrator) (option %pendingAdministrator address) : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CAR;        # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }
                          {
                            # == sweepMutez ==
                            # if params: # @parameter%sweepMutez : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                            IF
                              {
                                # sp.send(self.data.administrator, sp.balance) # pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CAR;        # address : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CONTRACT %receive unit; # option (contract unit) : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                IF_NONE
                                  {
                                    PUSH int 20; # int : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                NIL operation; # list operation : @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                SWAP;       # @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                BALANCE;    # @balance : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                UNIT;       # unit : @balance : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                              }
                              {
                                # sp.send(self.data.administrator, sp.balance) # pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                DUP;        # pair (address %administrator) (option %pendingAdministrator address) : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CAR;        # address : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CONTRACT unit; # option (contract unit) : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                IF_NONE
                                  {
                                    PUSH int 24; # int : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                NIL operation; # list operation : @some : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                SWAP;       # @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                BALANCE;    # @balance : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                UNIT;       # unit : @balance : @some : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                TRANSFER_TOKENS; # operation : list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                                CONS;       # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                              }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                          }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                      }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
                  }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
              }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
          }; # list operation : pair (address %administrator) (option %pendingAdministrator address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
      }; # list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
    NIL operation; # list operation : list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
    SWAP;       # list operation : list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
    ITER
      {
        CONS;       # list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
      }; # list operation : pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))
    DUG 2;      # pair address (option address) : big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address)))) : list operation
    PAIR;       # pair (pair address (option address)) (big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))) : list operation
    SWAP;       # list operation : pair (pair address (option address)) (big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address)))))
    PAIR;       # pair (list operation) (pair (pair address (option address)) (big_map nat (lambda (pair (or (or unit unit) (or address (pair address (pair address int)))) (pair address (option address))) (pair (list operation) (pair address (option address))))))
  };