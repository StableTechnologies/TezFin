import smartpy as sp

tstorage = sp.TRecord(administrator = sp.TAddress, pendingAdministrator = sp.TOption(sp.TAddress)).layout(("administrator", "pendingAdministrator"))
tparameter = sp.TVariant(acceptContractGovernance = sp.TAddress, acceptGovernance = sp.TUnit, disableMarket = sp.TRecord(cToken = sp.TAddress, comptroller = sp.TAddress).layout(("cToken", "comptroller")), receive = sp.TUnit, reduceReserves = sp.TRecord(amount = sp.TNat, cToken = sp.TAddress).layout(("amount", "cToken")), setAccrualIntPeriodRelevance = sp.TRecord(blockNumber = sp.TNat, cToken = sp.TAddress).layout(("blockNumber", "cToken")), setBorrowPaused = sp.TRecord(comptroller = sp.TAddress, tokenState = sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state"))).layout(("comptroller", "tokenState")), setCloseFactor = sp.TRecord(closeFactor = sp.TNat, comptroller = sp.TAddress).layout(("closeFactor", "comptroller")), setCollateralFactor = sp.TRecord(collateralFactor = sp.TRecord(cToken = sp.TAddress, newCollateralFactor = sp.TNat).layout(("cToken", "newCollateralFactor")), comptroller = sp.TAddress).layout(("collateralFactor", "comptroller")), setComptroller = sp.TRecord(cToken = sp.TAddress, comptroller = sp.TAddress).layout(("cToken", "comptroller")), setContractGovernance = sp.TRecord(contractAddress = sp.TAddress, governance = sp.TAddress).layout(("contractAddress", "governance")), setInterestRateModel = sp.TRecord(cToken = sp.TAddress, interestRateModel = sp.TAddress).layout(("cToken", "interestRateModel")), setLiquidationIncentive = sp.TRecord(comptroller = sp.TAddress, liquidationIncentive = sp.TNat).layout(("comptroller", "liquidationIncentive")), setLiquidityPeriodRelevance = sp.TRecord(blockNumber = sp.TNat, comptroller = sp.TAddress).layout(("blockNumber", "comptroller")), setMintPaused = sp.TRecord(comptroller = sp.TAddress, tokenState = sp.TRecord(cToken = sp.TAddress, state = sp.TBool).layout(("cToken", "state"))).layout(("comptroller", "tokenState")), setPendingGovernance = sp.TAddress, setPriceOracleAndTimeDiff = sp.TRecord(comptroller = sp.TAddress, priceOracle = sp.TAddress, timeDiff = sp.TInt).layout(("comptroller", ("priceOracle", "timeDiff"))), setPricePeriodRelevance = sp.TRecord(blockNumber = sp.TNat, comptroller = sp.TAddress).layout(("blockNumber", "comptroller")), setReserveFactor = sp.TRecord(cToken = sp.TAddress, newReserveFactor = sp.TNat).layout(("cToken", "newReserveFactor")), setTransferPaused = sp.TRecord(comptroller = sp.TAddress, state = sp.TBool).layout(("comptroller", "state")), supportMarket = sp.TRecord(comptroller = sp.TAddress, market = sp.TRecord(cToken = sp.TAddress, name = sp.TString, priceExp = sp.TNat).layout(("cToken", ("name", "priceExp")))).layout(("comptroller", "market")), sweepFA12 = sp.TRecord(amount = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", "tokenAddress")), sweepFA2 = sp.TRecord(amount = sp.TNat, id = sp.TNat, tokenAddress = sp.TAddress).layout(("amount", ("id", "tokenAddress"))), sweepMutez = sp.TBool).layout((((("acceptContractGovernance", ("acceptGovernance", "disableMarket")), ("receive", ("reduceReserves", "setAccrualIntPeriodRelevance"))), (("setBorrowPaused", ("setCloseFactor", "setCollateralFactor")), ("setComptroller", ("setContractGovernance", "setInterestRateModel")))), ((("setLiquidationIncentive", ("setLiquidityPeriodRelevance", "setMintPaused")), ("setPendingGovernance", ("setPriceOracleAndTimeDiff", "setPricePeriodRelevance"))), (("setReserveFactor", ("setTransferPaused", "supportMarket")), ("sweepFA12", ("sweepFA2", "sweepMutez"))))))
tprivates = { }
tviews = { }
