@startuml repayBorrow
Actor User
participant CToken
participant Comptroller

User -> CToken : repayBorrow(params)
CToken -> CToken : verifyNotInternal()
CToken -> CToken : verifyRepayBorrowAllowed(payer = sp.sender, borrower = sp.sender, repayAmount = params)
CToken -> Comptroller : repayBorrowAllowed(cToken = sp.self_address, payer = sp.sender, borrower = sp.sender, repayAmount = params)
Comptroller -> Comptroller : verifyMarketListed(cToken)
Comptroller -> Comptroller : invalidateLiquidity(payer)
Comptroller -> Comptroller : invalidateLiquidity(borrower)
CToken -> CToken : repayBorrowInternal(payer = sp.sender, borrower = borrower, repayAmount = repayAmount)
CToken -> CToken : verifyAccruedInterestRelevance()
CToken -> CToken : getBorrowBalance(borrower)
CToken -> CToken : doTransferIn(from_ = payer, amount = repayAmount)
CToken -> CToken : invalidateAccruedInterest()
@enduml
