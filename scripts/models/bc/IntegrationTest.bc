

define irm(multiplierperblock, baserateperblock, expscale){
	irm[0] = multiplierperblock;
	irm[1] = baserateperblock;
	irm[2] = expscale;
}


define getmultiplierperblock(irm){
	return irm[0];
}

define setmultiplierperblock(irm,multiplierperblock){
	irm[0] = irm;
	return irm
}


define getbaserateperblock(irm){
	return irm[1];
}

define setbaserateperblock(irm,baserateperblock){
	irm[1] = irm;
	return irm
}


define getexpscale(irm){
	return irm[2];
}

define setexpscale(irm,expscale){
	irm[2] = irm;
	return irm
}


# add to state  for doAccrueInterest
# irm
# accrualblocknumber 
# borrowindex 
define state(cash, totalborrows,totalsupply,totalreserves,balances,ctokenscale, underlyingscale, initialexchangeratemantissa) {
	state[0] = totalborrows;     
	state[1] = totalsupply;
	state[2] = totalreserves;
	state[3] = balances;
	state[4] = ctokenscale;
	state[5] = underlyingscale;
	state[6] = cash;
	state[7]=initialexchangeratemantissa
	return state 
}


define printstate(state) {
       
	totalborrows=state[0]     
	totalsupply=state[1]
	totalreserves=state[2]
	balances=state[3]
	ctokenscale=state[4]
	underlyingscale=state[5]
	cash=state[6]
	initialexchangeratemantissa=state[7]

	print "\n";
	print "totalborrows                        : ";
	print totalborrows                       ;
	print "\n";
	print "\n";
	print "totalsupply                    : ";
	print totalsupply                   ;
	print "\n";
	print "\n";
	print "totalreserves                  : ";
	print totalreserves                 ;
	print "\n";
	print "\n";
	print "balances                       : ";
	print balances                      ;
	print "\n";
	print "\n";
	print "ctokenscale                    : ";
	print ctokenscale                   ;
	print "\n";
	print "\n";
	print "underlyingscale                : ";
	print underlyingscale               ;
	print "\n";
	print "\n";
	print "cash                           : ";
	print cash                          ;
	print "\n";
	print "\n";
	print "initialexchangeratemantissa    : ";
	print initialexchangeratemantissa   ;
	print "\n";
}

define toscale(int) {
	return 10 ^ int
}
define getinitialexchangeratemantissa(state){
	return state[7];
}
define getcash(state){
	return state[6];
}

define setcash(state,cash){
	state[6] = cash;
	return state
}


define addcash(state,cash){
	state[6] = state[6] + cash;
	return state
}

define removecash(state,cash){
	state[6] = state[6] - cash;
	return state
}

define getctokenscale(state){
	return state[4];
}

define getunderlyingscale(state){
	return state[5];
}

define gettotalsupply(state){
	return state[1];
}

define settotalsupply(state,totalsupply){
	state[1] = totalsupply;
	return state
}


define addtotalsupply(state,supply){
	state[1] = state[1] + supply;
	return state
}

define gettotalreserves(state){
	return state[2];
}
define settotalreserves(state,totalreserves){
	state[2] = totalreserves;
	return state
}
define addtotalreserves(state,reserves){
	state[2] = state[2] + reserves;
	return state
}

define getbalances(state){
	return state[3];
}
define addbalances(state,minter,balance){
	state[3][minter] = state[3][minter] + balances;
	return state
}
define setbalances(state,balances){
	state[3] = balances;
	return state
}

define gettotalborrows(state){
	return state[0];
}
define settotalborrows(state,totalborrows){
	state[0] = totalborrows;
	return state
}
define addtotalborrows(state,borrow){
	state[0] = state[0] + borrow;
	return state
}

define mulnatexp(a, b, expscale)
        return a * b // expscale
}

define divnatexp(nat,exp,scle) {
	scale=0;
	print "\n";
	print "nat  : ";
	print nat ;
	print "\n";
	print "\n";
	print "exp  : ";
	print exp ;
	print "\n";
	print "\n";
	print "scle : ";
	print scle;
	print "\n";
	return (nat * scle) / exp
}



define divexpexp(self, a, b, expScale){
	 scale=0;
}        return (a * expScale / b)



define rescale(self, mantissa, mantissascale, newscale){
        numerator = mantissa * newscale
        rescaled = numerator // mantissascale
        return rescaled
	}

define mulexpnat(a,b){
	scale=0;
	return a * b
}

define toexp(self, value,expscale){
}        return value * expscale

define truncate(a,scle){
	scale=0;
	return a / scle
}
define mulscalartruncate(a,b,scle){
	scale=0;
	return truncate(mulexpnat(a,b),scle)
}
define mulscalartruncateadd(a,b,c,scle){
	scale=0;
	return truncate(mulexpnat(a,b),scle) + c
}

define subnatnat(self, a, b){
        return a - b
}

define mint(state, minter, mintamount){
    minttokens = getminttokens(state,mintamount);
    state = addtotalsupply(state, minttokens);
    state = addbalances(state, minter, minttokens);
    return state;
}

define getminttokens(state, mintamount){
    return getactualamount(state, mintamount, 1, 0)
}

define getactualamount(state, amount, isunderlying, adjustment){
    exchangerate = exchangerateadjusted(state, adjustment)
    if (isunderlying==1) {
	if (ctokenscale(state)>=underlyingscale(state)) {
        actualamount=divnatexp(amount, exchangerate, divexpexp(getctokenscale(state), getunderlyingscale(state)); 
	} else {
        actualamount=mulnatexp(amount, exchangerate, divexpexp(getunderlyingscale(state), getctokenscale(state)); 
	} 
    } else{
        actualamount=mulscalartruncate(exchangerate, amount);
    }
    return actualamount
}

define exchangerateadjusted( adjustment, state){
        excrate = getinitialexchangeratemantissa(state)
        if (totalsupply > 0){
            cash = rescale(subnatnat(getcash(state), adjustment) , getunderlyingscale(state) , getctokenscale(state))
            cashplusborrowsminusreserves = cash + gettotalborrows(state) - gettotalreserves(state)
            exchangerate = divexpnat(toexp(cashplusborrowsminusreserves, getctokenscale(state)), gettotalsupply(state))
	    excrate = exchangerate
	    }
}        return excrate




define doAccrueInterest(borrowrate, blockdelta, reservefactormantissa, totalreserves, irmscale,ctokenscale,initializationvariablescales) {

        borrowRateRescaled = rescale(borrowrate, irmscale, ctokenscale)
        simpleInterestFactor =  mulexpnat(borrowRateRescaled, blockdelta)
        interestaccumulated = mulscalartruncate(simpleinterestfactor, totalborrows)
        totalborrows = interestaccumulated + totalborrows
        totalreserves = mulscalartruncateadd(rescale(reservefactormantissa, initializationvariablescales, self.data.underlyingscale),interestaccumulated, totalreserves)
        borrowindex = mulscalartruncateadd(simpleinterestfactor, borrowindex, borrowindex)
	borrowsreservesbi[0] = totalborrows;
	borrowsreservesbi[1] = totalreserves;
	borrowsreservesbi[2] = borrowindex;
	return borrowsreservesbi
}
define utilizationrate(cash, borrows, reserves, escale){
	divisor=cash+borrows-reserves;
	scale=0;
	return (borrows * escale) / divisor;
}

define calcborrowrate(u, multiplierperblock, escale, baserateperblock) {
	scale=0
	borrowrate=(u * multiplierperblock / escale) + baserateperblock;
	return borrowrate
}
define calcsupplyrate(loans,balance,reserves,escale,blockmultiplier, blockbaserate, reservefactor){
       u = utilizationrate(balance, loans, reserves, escale);
       brate = calcborrowrate(u,blockmultiplier,escale,blockbaserate);
       oneminusreservefactor = expscale - reservefactor;
       scale=0;
       ratetopool=brate * oneminusreservefactor / escale;
       srate= u * ratetopool / escale;
       return srate;
}

define abs(i) {
    if (i < 0) return (-i)
    return (i)
}

define testold(lent,borrowed){
        s=18;
	annualperiods = 1051920;
	expscale=1000000000000000000;
	totalborrows=borrowed * expscale;
	initialexchangeratemantissa=1000000000000000000;
	currentcash=lent * expscale; 
	totalreserves=0;
	scle=1000000000000000000;
	baserateperblock=(0.1 / (annualperiods * 100)) * scle;
	multiplierperblock=((5 - 0.1) / (annualperiods * 100)) * scle;
	reservefactormantissa=0.001 * scle;



	scale=0; 

	reservefactormantissa=reservefactormantissa / 1;
	baserateperblock=baserateperblock/1;
	multiplierperblock=multiplierperblock/1;


	print "reservefactormantissa : ";
	print reservefactormantissa;
	print "\n";
	print "baserateperblock : ";
	print baserateperblock;
	print "\n";
	print "multiplierperblock : ";
	print multiplierperblock;
	print "\n";

	print "totalborrows : ";
	print totalborrows;
	print "\n";
	print "currentcash : ";
	print currentcash;
	print "\n";

