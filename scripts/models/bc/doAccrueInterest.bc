
    # def doAccrueInterestModified(self, borrowRateMantissa):
    #     sp.set_type(borrowRateMantissa, sp.TNat)
    #     self.verifyIRM()
    #     irmScale = sp.view("getScale",self.data.interestRateModel,
    #                                 sp.unit, 
    #                                 t=sp.TNat
    #                                 ).open_some("INVALID InterestRateModel VIEW")
    #     borrowRateRescaled = self.rescale(borrowRateMantissa, irmScale, self.data.underlyingScale)
    #     self.verifyAndFinishActiveOp(OP.CTokenOperations.ACCRUE)
    #     sp.verify(borrowRateRescaled <=
    #               self.rescale(self.data.borrowRateMaxMantissa, sp.nat(int(1e18)), self.data.underlyingScale), EC.CT_INVALID_BORROW_RATE)
    #     cash = self.getCashImpl()
    #     blockDelta = sp.as_nat(sp.level - self.data.accrualBlockNumber)

    #     simpleInterestFactor = sp.compute(self.mul_exp_nat(
    #         self.makeExp(borrowRateRescaled), blockDelta))
    #     interestAccumulated = sp.compute(self.mulScalarTruncate(
    #         simpleInterestFactor, self.data.totalBorrows))
    #     self.data.totalBorrows = interestAccumulated + self.data.totalBorrows
    #     self.data.totalReserves = self.mulScalarTruncateAdd(sp.record(mantissa=self.rescale(self.data.reserveFactorMantissa, sp.nat(int(1e18)), self.data.underlyingScale)),
    #                                                         interestAccumulated,
    #                                                         self.data.totalReserves)
    #     self.data.borrowIndex = self.mulScalarTruncateAdd(
    #         simpleInterestFactor, self.data.borrowIndex, self.data.borrowIndex)
    #     self.data.accrualBlockNumber = sp.level


    # def doAccrueInterest(self, borrowRateMantissa):
    #    sp.set_type(borrowRateMantissa, sp.TNat)
    #    self.verifyIRM()
    #    self.verifyAndFinishActiveOp(OP.CTokenOperations.ACCRUE)
    #    sp.verify(borrowRateMantissa <=
    #              self.data.borrowRateMaxMantissa, EC.CT_INVALID_BORROW_RATE)
    #    cash = self.getCashImpl()
    #    blockDelta = sp.as_nat(sp.level - self.data.accrualBlockNumber)

    #    simpleInterestFactor = sp.compute(self.mul_exp_nat(
    #        self.makeExp(borrowRateMantissa), blockDelta))
    #    interestAccumulated = sp.compute(self.mulScalarTruncate(
    #        simpleInterestFactor, self.data.totalBorrows))
    #    self.data.totalBorrows = interestAccumulated + self.data.totalBorrows
    #    self.data.totalReserves = self.mulScalarTruncateAdd(sp.record(mantissa=self.data.reserveFactorMantissa),
    #                                                        interestAccumulated,
    #                                                        self.data.totalReserves)
    #    self.data.borrowIndex = self.mulScalarTruncateAdd(
    #        simpleInterestFactor, self.data.borrowIndex, self.data.borrowIndex)
    #    self.data.accrualBlockNumber = sp.level


define doaccrueinterest(state) {
	interestratemodel = getirm(state)
	borrowratemaxmantissa = getborrowratemaxmantissa(state);
	borrowrate = calcborrowrate(state,irm)
        if (borrowratemantissa <= borrowratemaxmantissa) {
#		cash = getcash(state)
#		accrualblocknumber = getaccrualblocknumber(state)
#		level = getlevel(state);
#		accrualblocknumber = getaccrualblocknumber(state)
#		blockdelta = level - accrualblocknumber
#		simpleinterestfactor = mulexpnat(borrowratemantissa, blockdelta)
#		interestaccumulated = mulscalartruncate(simpleinterestfactor, gettotalborrows(state))
#		state = addtotalborrows(state,interestaccumulated);
#
#		totalreserves = gettotalreserves(state);
#		reservefactormantissa = getreservefactormantissa(state);
#		totalreserves = mulscalartruncateadd(reservefactormantissa, interestaccumulated, totalreserves)
#		state = settotalreserves(state, totalreserves);
#
#		borrowindex = getborrowindex(state);
#		borrowindex = mulscalartruncateadd(simpleinterestfactor, borrowindex, borrowindex);
#		state = setborrowindex(state, borrowindex);
#
#		state = setaccrualblocknumber(state, getlevel(state));
		return state
	} else {
	  print "\n";
	  print "ERROR!!! borrowratemantissa > borrowratemaxmantissa"
	}
}

# define doaccrueinterestmodified(borrowrate, blockdelta, reservefactormantissa, totalreserves, irmscale,ctokenscale,initializationvariablescales) {
# 
#         borrowRateRescaled = rescale(borrowrate, irmscale, ctokenscale)
#         simpleInterestFactor =  mulexpnat(borrowRateRescaled, blockdelta)
#         interestaccumulated = mulscalartruncate(simpleinterestfactor, totalborrows)
#         totalborrows = interestaccumulated + totalborrows
#         totalreserves = mulscalartruncateadd(rescale(reservefactormantissa, initializationvariablescales, self.data.underlyingscale),interestaccumulated, totalreserves)
#         borrowindex = mulscalartruncateadd(simpleinterestfactor, borrowindex, borrowindex)
# 	borrowsreservesbi[0] = totalborrows;
# 	borrowsreservesbi[1] = totalreserves;
# 	borrowsreservesbi[2] = borrowindex;
# 	return borrowsreservesbi
# }
