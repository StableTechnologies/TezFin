
    # def doAccrueInterestModified(self, borrowRateMantissa):
    #     sp.set_type(borrowRateMantissa, sp.TNat)
    #     self.verifyIRM()
    #     irmScale = sp.view("getScale",self.data.interestRateModel,
    #                                 sp.unit, 
    #                                 t=sp.TNat
    #                                 ).open_some("INVALID InterestRateModel VIEW")
    #     borrowRateRescaled = self.rescale(borrowRateMantissa, irmScale, self.data.underlyingScale)
    #     self.verifyAndFinishActiveOp(OP.CTokenOperations.ACCRUE)
    #     sp.verify(borrowRateRescaled <=
    #               self.rescale(self.data.borrowRateMaxMantissa, sp.nat(int(1e18)), self.data.underlyingScale), EC.CT_INVALID_BORROW_RATE)
    #     cash = self.getCashImpl()
    #     blockDelta = sp.as_nat(sp.level - self.data.accrualBlockNumber)

    #     simpleInterestFactor = sp.compute(self.mul_exp_nat(
    #         self.makeExp(borrowRateRescaled), blockDelta))
    #     interestAccumulated = sp.compute(self.mulScalarTruncate(
    #         simpleInterestFactor, self.data.totalBorrows))
    #     self.data.totalBorrows = interestAccumulated + self.data.totalBorrows
    #     self.data.totalReserves = self.mulScalarTruncateAdd(sp.record(mantissa=self.rescale(self.data.reserveFactorMantissa, sp.nat(int(1e18)), self.data.underlyingScale)),
    #                                                         interestAccumulated,
    #                                                         self.data.totalReserves)
    #     self.data.borrowIndex = self.mulScalarTruncateAdd(
    #         simpleInterestFactor, self.data.borrowIndex, self.data.borrowIndex)
    #     self.data.accrualBlockNumber = sp.level


    # def doAccrueInterest(self, borrowRateMantissa):
    #    sp.set_type(borrowRateMantissa, sp.TNat)
    #    self.verifyIRM()
    #    self.verifyAndFinishActiveOp(OP.CTokenOperations.ACCRUE)
    #    sp.verify(borrowRateMantissa <=
    #              self.data.borrowRateMaxMantissa, EC.CT_INVALID_BORROW_RATE)
    #    cash = self.getCashImpl()
    #    blockDelta = sp.as_nat(sp.level - self.data.accrualBlockNumber)

    #    simpleInterestFactor = sp.compute(self.mul_exp_nat(
    #        self.makeExp(borrowRateMantissa), blockDelta))
    #    interestAccumulated = sp.compute(self.mulScalarTruncate(
    #        simpleInterestFactor, self.data.totalBorrows))
    #    self.data.totalBorrows = interestAccumulated + self.data.totalBorrows
    #    self.data.totalReserves = self.mulScalarTruncateAdd(sp.record(mantissa=self.data.reserveFactorMantissa),
    #                                                        interestAccumulated,
    #                                                        self.data.totalReserves)
    #    self.data.borrowIndex = self.mulScalarTruncateAdd(
    #        simpleInterestFactor, self.data.borrowIndex, self.data.borrowIndex)
    #    self.data.accrualBlockNumber = sp.level
