define mulnatexp(a, b, expscale){
	 
	scale=0;
        return a * b / expscale
}

define divexpnat(a, b){
        return a / b
	}

define divnatexp(a,b,expscale) {
	scale=0;
	print "\n";
	print "a  : ";
	print a ;
	print "\n";
	print "\n";
	print "b  : ";
	print b ;
	print "\n";
	print "\n";
	print "expscale : ";
	print expscale;
	print "\n";
	divab = (a * expscale) / b
	print "\n";
	print "divab : ";
	print divab;
	print "\n";
	return (a * expscale) / b
}



define divexpexp(a, b, expscale){
	 scale=0;
        return a * expscale / b
	}


define rescale( mantissa, mantissascale, newscale){

	scale=0;
        numerator = mantissa * newscale
        rescaled = numerator / mantissascale
        return rescaled
	}

define mulexpnat(a,b){
	scale=0;
	return a * b
}

define toexp( value,expscale){
	scale=0;
	print "\n";
	print "value : ";
	print value;
	print "\n";
	print "\n";
	print "expscale : ";
	print expscale;
	print "\n";
        return value * expscale
	}

define truncate(a,scle){
	scale=0;
	return a / scle
}
define mulscalartruncate(a,b,scle){
	scale=0;
	return truncate(mulexpnat(a,b),scle)
}
define mulscalartruncateadd(a,b,c,scle){
	scale=0;
	return truncate(mulexpnat(a,b),scle) + c
}

define subnatnat( a, b){

	scale=0;
        return a - b
}
