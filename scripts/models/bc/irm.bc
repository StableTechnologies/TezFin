
define irm(multiplierperblock, baserateperblock, expscale){
	irm[0] = multiplierperblock;
	irm[1] = baserateperblock;
	irm[2] = expscale;
}


define getmultiplierperblock(irm){
	return irm[0];
}

define setmultiplierperblock(irm,multiplierperblock){
	irm[0] = irm;
	return irm
}


define getbaserateperblock(irm){
	return irm[1];
}

define setbaserateperblock(irm,baserateperblock){
	irm[1] = irm;
	return irm
}


define getirmexpscale(irm){
	return irm[2];
}

define setirmexpscale(irm,expscale){
	irm[2] = irm;
	return irm
}

define utilizationrate(state,irm){
	scale=0;
	ur = 0;
	cash = getcash(state)
	borrows = gettotalborrows(state)
	reserves = gettotalreserves(state)
	escale = getirmexpscale(state)
	if (borrows > 0) {
	   divisor=cash+borrows-reserves;
	   if (divisor > 0) {
	      ur = (borrows * escale) / divisor;
	   } 
	} 
	return ur
}

define calcborrowrate(state,irm) {
	multiplierperblock = getmultiplierperblock(irm);
	baserateperblock = getbaserateperblock(irm);
	u = utilizationrate(state, irm)
	escale = getirmexpscale(state)
	scale=0
	borrowrate=(u * multiplierperblock / escale) + baserateperblock;
	return borrowrate
}

define calcsupplyrate(state,irm){
       brate = calcborrowrate(state,irm);
       scale=0;
       oneminusreservefactor = expscale - reservefactor;
       ratetopool=brate * oneminusreservefactor / escale;
       srate= u * ratetopool / escale;
       return srate;
}
