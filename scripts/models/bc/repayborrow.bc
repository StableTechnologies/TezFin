
    # """    
    #     Sender borrows assets from the protocol to their own address

    #     params: TNat - The amount of the underlying asset to borrow

    #     requirements:
    #         cToken: 
    #             accrueInterest() should be executed within 5 blocks prior to this call
    #         comptroller:
    #             updateAssetPrice() should be executed within 5 blocks prior to this call, for all markets entered by the user
    #             updateAccountLiquidity() should be executed within 5 blocks prior to this call
    # """
    # @sp.entry_point
    # def borrow(self, params):
    #     sp.set_type(params, sp.TNat)
    #     self.verifyNotInternal()
    #     self.verifyBorrowAllowed(sp.sender, params)
    #     self.borrowInternal(sp.record(borrower=sp.sender, borrowAmount=params))

    # def borrowInternal(self, params):
    #     self.checkCash(params.borrowAmount)
    #     self.verifyAccruedInterestRelevance()
    #     self.doTransferOut(params.borrower, params.borrowAmount)
    #     accountBorrows = self.getBorrowBalance(
    #         params.borrower) + params.borrowAmount
    #     self.data.balances[params.borrower].accountBorrows.principal = accountBorrows
    #     self.data.balances[params.borrower].accountBorrows.interestIndex = self.data.borrowIndex
    #     self.data.totalBorrows += params.borrowAmount

    # def verifyBorrowAllowed(self, borrower_, borrowAmount_):
    #     self.addAddressIfNecessary(borrower_)
    #     c = sp.contract(CMPI.TBorrowAllowedParams, self.data.comptroller,
    #                     entry_point="borrowAllowed").open_some()
    #     transferData = sp.record(
    #         cToken=sp.self_address, borrower=borrower_, borrowAmount=borrowAmount_)
    #     sp.transfer(transferData, sp.mutez(0), c)

    # """    
    #     Sender repays their own borrow

    #     params: TNat - The amount to repay

    #     requirements: 
    #         accrueInterest() should be executed within 5 blocks prior to this call
    # """
    # @sp.entry_point
    # def repayBorrow(self, params):
    #     sp.set_type(params, sp.TNat)
    #     self.verifyNotInternal()
    #     self.verifyRepayBorrowAllowed(sp.sender, sp.sender, params)
    #     self.repayBorrowInternal(
    #         sp.record(payer=sp.sender, borrower=sp.sender, repayAmount=params))
