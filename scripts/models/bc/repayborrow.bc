
#     @sp.entry_point
#     def repayBorrowBehalf(self, params):
#         sp.set_type(params, sp.TRecord(
#             borrower=sp.TAddress, repayAmount=sp.TNat))
#         self.verifyNotInternal()
#         self.verifyRepayBorrowAllowed(
#             sp.sender, params.borrower, params.repayAmount)
#         self.repayBorrowInternal(sp.record(
#             payer=sp.sender, borrower=params.borrower, repayAmount=params.repayAmount))
# 
#     def repayBorrowInternal(self, params):
#         self.verifyAccruedInterestRelevance()
#         accountBorrows = self.getBorrowBalance(params.borrower)
#         repayAmount = sp.min(accountBorrows, params.repayAmount)
#         self.doTransferIn(params.payer, repayAmount)
#         self.data.balances[params.borrower].accountBorrows.principal = self.sub_nat_nat(
#             accountBorrows, repayAmount)
#         self.data.balances[params.borrower].accountBorrows.interestIndex = self.data.borrowIndex
#         self.data.totalBorrows = self.sub_nat_nat(
#             self.data.totalBorrows, repayAmount)
#         sp.if self.data.balances[params.borrower].accountBorrows.principal == 0:
#             c = sp.contract(sp.TAddress, self.data.comptroller,
#                             entry_point="removeFromLoans").open_some()
#             sp.transfer(params.borrower, sp.mutez(0), c)
# 
#     def verifyRepayBorrowAllowed(self, payer_, borrower_, repayAmount_):
#         self.addAddressIfNecessary(payer_)
#         c = sp.contract(CMPI.TRepayBorrowAllowedParams, self.data.comptroller,
#                         entry_point="repayBorrowAllowed").open_some()
#         transferData = sp.record(
#             cToken=sp.self_address, payer=payer_, borrower=borrower_, repayAmount=repayAmount_)
#         sp.transfer(transferData, sp.mutez(0), c)
